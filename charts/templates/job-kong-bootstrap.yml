{{- if include "kong.isMigrationsBootstrap" $ -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-kong-bootstrap
  labels: {{ include "kong.labels" $ | nindent 4 }}
spec:
  backoffLimit: {{ .Values.setupJobs.backoffLimit | default 15 }}
  activeDeadlineSeconds: {{ .Values.setupJobs.activeDeadlineSeconds | default 3600 }}
  ttlSecondsAfterFinished: 60
  template:
    spec:
      {{- include "image_pull_secrets" $ | indent 6 }}
      securityContext: {{ include "platformSpecificValue" (list $ . ".Values.postgresql.podSecurityContext") | default "fsGroup: 999" | nindent 8 }}
      initContainers:
      - name: "check-database"
        image: '{{ include "postgresql.dbCheck.image" $ }}'
        imagePullPolicy: {{ .Values.postgresql.imagePullPolicy | default .Values.global.imagePullPolicy }}
        securityContext: {{ include "platformSpecificValue" (list $ . ".Values.postgresql.containerSecurityContext") | default "{}" | nindent 10 }}
        command: ['/bin/bash']
        args: ['-c', 'until pg_isready -U {{ .Values.global.database.username }}; do echo waiting for database; sleep 2; done;']
        env:
        {{- include "kong.migrations.checkdatabase.env" $ | indent 8 }}
      containers:
      - name: kong-bootstrap
        image: {{ include "kong.image" $ }}
        imagePullPolicy: {{ .Values.imagePullPolicy | default .Values.global.imagePullPolicy }}
        securityContext: {{ include "platformSpecificValue" (list $ . ".Values.containerSecurityContext") | default "{}" | nindent 10 }}
        env:
        {{- include "kong.migrations.env" $ | indent 8 }}
        command: [ "/bin/sh", "-c", "KONG_NGINX_DAEMON='off' kong migrations bootstrap" ]
        volumeMounts:
          {{- include "kong.migrations.volumeMounts" $ | indent 8 }}
      restartPolicy: OnFailure
      volumes:
      {{- include "kong.migrations.volumes" $ | indent 6 }}
{{- end -}}
