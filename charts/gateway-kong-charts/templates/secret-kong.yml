apiVersion: v1
kind: Secret
metadata:
  {{- $name := .Release.Name }}
  name: {{ $name }}
  labels: {{ include "kong.labels" $ | nindent 4 }}
  annotations: {{ include "argo.pathToSecret" $ | nindent 4 }}
type: Opaque
data:
{{- $failOnUnsetValues := eq (toString .Values.global.failOnUnsetValues) "true" }}
{{- $defaultUnsetValue := "changeme" }}
{{- $unsetValues := list }}
{{- $gatewayAdminApiKey := .Values.adminApi.gatewayAdminApiKey }}
{{- if not (and (eq $gatewayAdminApiKey $defaultUnsetValue) $failOnUnsetValues) }}
  {{- $gatewayAdminApiKey = dict "password" $gatewayAdminApiKey "rules" .Values.global.passwordRules }}
  gatewayAdminApiKey: {{ $gatewayAdminApiKey | include "passutil.validated" | b64enc | quote}}
{{- else }}
{{- $unsetValues = append $unsetValues "gatewayAdminApiKey" }}
{{- end }}
{{- $htpasswd := .Values.adminApi.htpasswd }}
{{- if not (and (eq $htpasswd $defaultUnsetValue) $failOnUnsetValues) }}
  .htpasswd: {{ $htpasswd | b64enc | quote }}
{{- else }}
{{- $unsetValues = append $unsetValues "htpasswd" }}
{{- end }}
{{- $databasePassword := .Values.global.database.password }}
{{- if not (and (eq $databasePassword $defaultUnsetValue) $failOnUnsetValues) }}
  {{- $databasePassword = dict "password" $databasePassword "rules" .Values.global.passwordRules }}
  databasePassword: {{ $databasePassword | include "passutil.validated" | b64enc | quote }}
{{- else }}
{{- $unsetValues = append $unsetValues "databasePassword" }}
{{- end }}
{{- if eq .Values.plugins.cequence.enabled true -}}
{{- $cequenceClientSecret := .Values.plugins.cequence.clientSecret }}
{{- if not (and (eq $cequenceClientSecret $defaultUnsetValue) $failOnUnsetValues) }}
  cequenceClientSecret: {{ $cequenceClientSecret | b64enc | quote }}
{{- else }}
{{- $unsetValues = append $unsetValues "cequenceClientSecret" }}
{{- end }}
{{- end -}}
{{- if and .Values.global.failOnUnsetValues (gt (len $unsetValues) 0) }}
{{- fail (printf "Values not set in %s: %v" $name $unsetValues) }}
{{- end }}