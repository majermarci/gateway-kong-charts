{{- if eq (include "kong.configuration" $) "true" }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configuration
  labels: {{ include "kong.labels" $ | nindent 4 }}
data:
  configuration.sh: |
    {{- if hasKey .Values "configuration" }}
    {{- .Values.configuration | nindent 4 }}
    {{- else }}
    {{- $apiUrl := include "kong.adminApi.serviceUrl" . }}
    echo ""
    echo "1) Create service (upstream:{{ $apiUrl }})"
    curl --request PUT \
      --url {{ $apiUrl }}/services/{{ include "kong.adminApi.name" . }} \
      --header 'Content-Type: application/json' \
      -u "admin:$X_TARDIS_GATEWAY_ADMIN" \
      --data \
      '{
        "name": "{{ include "kong.adminApi.name" . }}",
        "host": "localhost",
        "protocol": "http",
        "port": 8001
      }'

    echo ""
    echo "2) Create request transformer plugin for setting api key header"
    export X_TARDIS_GATEWAY_ADMIN_BASE64=$(echo -n "admin:$X_TARDIS_GATEWAY_ADMIN" | base64)
    curl --request PUT \
      --url {{ $apiUrl }}/services/{{ include "kong.adminApi.name" . }}/plugins/{{ .Values.plugins.requestTransformer.pluginId }} \
      --header 'Content-Type: application/json' \
      -u "admin:$X_TARDIS_GATEWAY_ADMIN" \
      --data \
      '{
        "name": "request-transformer",
        "config": {
          "replace": {"headers": ["'"Authorization:Basic $X_TARDIS_GATEWAY_ADMIN_BASE64"'"]}
        }
      }'

    echo ""
    echo "3) Create route (/{{ include "kong.adminApi.name" . }}) variable: hosts"
    curl --request PUT \
      --url {{ $apiUrl }}/services/{{ include "kong.adminApi.name" . }}/routes/{{ include "kong.adminApi.name" . }} \
      --header 'Content-Type: application/json' \
      -u "admin:$X_TARDIS_GATEWAY_ADMIN" \
      --data \
      '{
        "name": "{{ include "kong.adminApi.name" . }}",
        "protocols": ["http","https"],
        "hosts": [
          "{{- if or (hasKey .Values "configuration") (eq .Values.adminApi.ingress.enabled false) }}
          {{- include "kong.proxy.host" . }}"
          {{- else }}
          {{- include "kong.adminApi.host" . }}
          {{- end }}"
        ],
        "paths": [
          "/{{ include "kong.adminApi.name" . }}"
        ]
      }'

    echo ""
    echo "4) Create consumer (rover)"
    curl --request PUT \
      --url {{ $apiUrl }}/consumers/rover \
      --header 'Content-Type: application/json' \
      -u "admin:$X_TARDIS_GATEWAY_ADMIN" \
      --data '{"username" : "rover","custom_id": "rover"}'

    echo ""
    echo "5) Apply ACL plugin to route (/{{ include "kong.adminApi.name" . }})"
    echo "and allow group (rover)"
    curl --request PUT \
      --url {{ $apiUrl }}/routes/{{ include "kong.adminApi.name" . }}/plugins/{{ .Values.plugins.acl.pluginId }} \
      --header 'Content-Type: application/json' \
      -u "admin:$X_TARDIS_GATEWAY_ADMIN" \
      --data \
      '{
        "name": "acl",
        "config": {
          "allow":["rover"],
          "hide_groups_header": true
        }
      }'

    echo ""
    echo "6) Add consumer (rover) to group (rover)"
    curl --request POST \
      --url {{ $apiUrl }}/consumers/rover/acls \
      --header 'Content-Type: application/json' \
      -u "admin:$X_TARDIS_GATEWAY_ADMIN" \
      --data '{"group":"rover"}'

    {{- if eq .Values.plugins.jwtKeycloak.enabled true }}
    echo ""
    echo "7) Setup plugin (jwt-keycloak)"
    echo "variable [allowed_iss]"
    curl --request PUT \
      --url {{ $apiUrl }}/routes/{{ include "kong.adminApi.name" . }}/plugins/{{ .Values.plugins.jwtKeycloak.pluginId }} \
      --header 'Content-Type: application/json' \
      -u "admin:$X_TARDIS_GATEWAY_ADMIN" \
      --data \
      '{
        "name": "jwt-keycloak",
        "config": {
          "allowed_iss" : [{{- include "kong.jwtKeycloak.allowedIss" . -}}],
          "consumer_match" : true,
          "consumer_match_claim_custom_id" : true
        }
      }'
    {{- if eq .Values.irixBrokerRoute.enabled true }}
    echo ""
    echo "8) Create service (upstream: {{ .Values.irixBrokerRoute.upstream.protocol }}//{{ include "kong.irixBrokerRoute.upstreamHost" . }}:{{ .Values.irixBrokerRoute.upstream.port }})"
    curl --request PUT \
      --url {{ $apiUrl }}/services/{{ .Values.irixBrokerRoute.name }} \
      --header 'Content-Type: application/json' \
      -u "admin:$X_TARDIS_GATEWAY_ADMIN" \
      --data \
      '{
        "name": "{{ .Values.irixBrokerRoute.name }}",
        "tags": ["irix-broker","{{ .Values.irixBrokerRoute.name }}"],
        "protocol": "{{ .Values.irixBrokerRoute.upstream.protocol }}",
        "host": "{{ include "kong.irixBrokerRoute.upstreamHost" . }}",
        "port": {{ .Values.irixBrokerRoute.upstream.port }},
        "path": "{{ .Values.irixBrokerRoute.upstream.path }}"
      }'
    echo ""
    echo "9) Create route (/{{ .Values.irixBrokerRoute.name }}) "
    curl --request PUT \
      --url {{ $apiUrl }}/services/{{ .Values.irixBrokerRoute.name }}/routes/{{ .Values.irixBrokerRoute.name }} \
      --header 'Content-Type: application/json' \
      -u "admin:$X_TARDIS_GATEWAY_ADMIN" \
      --data \
      '{
        "name": "{{ .Values.irixBrokerRoute.name }}",
        "tags": ["irix-broker","{{ .Values.irixBrokerRoute.name }}"],
        "strip_path": true,
        "preserve_host": true,
        "protocols": ["http","https"],
        "methods": ["GET","POST"],
        "hosts": [
          "{{ include "kong.irixBrokerRoute.spacegateHost" . }}"
        ],
        "paths": [
          "/{{ .Values.irixBrokerRoute.name }}"
        ]
      }'
    {{- end -}}
    {{- end -}}
    {{- end -}}

{{- end -}}
