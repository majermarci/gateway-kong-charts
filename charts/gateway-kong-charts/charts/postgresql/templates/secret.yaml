{{- if eq .Values.global.database.location "local" }}
apiVersion: v1
kind: Secret
metadata:
  {{- $name := include "postgresql.secretName" . }}
  name: {{ $name }}
  labels: {{ include "postgresql.labels" $ | nindent 4 }}
  annotations: {{ include "argo.pathToSecret" $ | nindent 4 }}
type: Opaque
data:
{{- $failOnUnsetValues := eq (toString .Values.global.failOnUnsetValues) "true" }}
{{- $defaultUnsetValue := "changeme" }}
{{- $unsetValues := list }}
{{- if .Values.adminPassword }} 
{{- $adminPassword := .Values.adminPassword }}
{{- if not (and (eq $adminPassword $defaultUnsetValue) $failOnUnsetValues) }}
  {{- $adminPassword = dict "password" $adminPassword "rules" .Values.global.passwordRules }}
  adminPassword: {{ $adminPassword | include "passutil.validated" | b64enc | quote }}
{{- else }}
{{- $unsetValues = append $unsetValues "adminPassword" }}
{{- end }}
{{- end }}{{- $databasePassword := .Values.global.database.password }}
{{- if not (and (eq $databasePassword $defaultUnsetValue) $failOnUnsetValues) }}
  {{- $databasePassword = dict "password" $databasePassword "rules" .Values.global.passwordRules }}
  databasePassword: {{ $databasePassword | include "passutil.validated" | b64enc | quote }}
{{- else }}
{{- $unsetValues = append $unsetValues "databasePassword" }}
{{- end }}
{{- if and .Values.global.failOnUnsetValues (gt (len $unsetValues) 0) }}
{{- fail (printf "Values not set in %s: %v" $name $unsetValues) }}
{{- end }}
{{- end }}